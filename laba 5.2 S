#include "Header.h"
void F_CREATE_PLANE(int number, int N, std::multimap<int, std::string>& plane_and_town)
{
	string town;
	int j;
	for (j = 0; j < N; j++)
	{
		cin >> town;
		plane_and_town.emplace(make_pair(number, town));
	}
}
void F_PLANES_FOR_TOWN(std::multimap<int, std::string>& plane_and_town, string town,
	std::vector <int> keys)
{
	cout << "TOWN " << town << " : ";
	for (int i = 0; i < keys.size(); i++) {
		auto range = plane_and_town.equal_range(keys[i]);
		for (auto j = range.first; j != range.second; j++)
		{
			if (j->second == town)
			{
				cout << j->first << ' ';
			}
		}
	}
	cout << endl;
}
void F_TOWNS_FOR_PLANE(int number, string town, std::vector <int> keys, std::multimap<int,
	std::string>& plane_and_town)
{
	int s = 0;
	vector <string> city;
	auto range = plane_and_town.equal_range(number);
	cout << "PLANE " << number << ": ";
	for (auto i = range.first; i != range.second; i++) {
		cout << i->second << ' ';
		city.push_back(i->second);
	}
	cout << endl;
	for (int k = 0; k < city.size(); k++) {
		cout << "TOWN " << city[k] << " : ";
		for (int i = 0; i < keys.size(); i++) {
			auto range = plane_and_town.equal_range(keys[i]);
			for (auto j = range.first; j != range.second; j++) {
				if ((j->second == city[k]) && (j->first != number)) {
					cout << j->first << ' ';
					s++;
				}
			}
		}
		if (s == 0)
		{
			cout << 0 << ' ';
		}
		s = 0;
		cout << endl;
	}
}
void F_PLANES(int number, string town, std::multimap <int, std::string> plane_and_town,
	std::vector <int> keys)
{
	for (int i = 0; i < keys.size(); i++)
	{
		auto range = plane_and_town.equal_range(keys[i]);
		cout << "PLANE " << keys[i] << ": ";
		for (auto i = range.first; i != range.second; i++)
		{
			cout << i->second << ' ';
		}
		cout << endl;
	}
}
