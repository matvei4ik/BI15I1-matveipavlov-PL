1
#include <iostream>
#include <vector>
#include <math.h>

using namespace std;


void ShakerSort(vector<int>& values) {
    if (values.empty()) {
        return;
    }
    int left = 0;
    int right = values.size() - 1;
    while (left <= right) {
        for (int i = right; i > left; --i) {
            if (values[i - 1] > values[i]) {
                swap(values[i - 1], values[i]);
            }
        }
        ++left;
        for (int i = left; i < right; ++i) {
            if (values[i] > values[i + 1]) {
                swap(values[i], values[i + 1]);
            }
        }
        --right;
    }
}

int main()
{
    setlocale(LC_ALL,"Russian");
    vector<int> array = { -1 ,  2 , -3 ,  4 ,  7 ,  6, 3  };
    int sum = 0, min=10,max=0,index=0,proizv=1,indmin=0,indmax=0;
    for (int i : array) {
        if (i > 0) {
            sum += i;
        }
        if (min > abs(i)) { min = abs(i); indmin = index; }
        if (max < abs(i)) { max = abs(i); indmax = index; }
        index++;
    }

    if (min < max) {
        for (index = indmin; index <= indmax; index++)
        {
            proizv*=array[index];
        }
    }
    else {
        for (index = indmax; index <= indmin; index++)
        {
            proizv *= array[index];
        }
    }
    ShakerSort(array);


    cout << "Сумма всех положительных элементов\n" << sum << endl;
    cout << "Произведение элементов, находящихся между наибольшим и наименьшим по модулю\n" << proizv << endl << "Отсортированный массив\n";
    for (auto i : array) cout << i << endl;
}







2
#include <iostream>
#include <random>
#include <vector>
#include <math.h>

using namespace std;

static mt19937_64 rng;

int main()
{
    setlocale(LC_ALL,"Russian");
    int n;
    unsigned int ciferka;
    cout << "Введите количество элементов в массиве\n";
    cin >> n;
    vector<vector<int>> out_line;
    vector<int> tmp;
    bool is_first_zero;
    for (int i = 0; i < n; i++)
    {
        tmp = {};
        for (int i = 0; i < rng() % 9 + 1; i++)
        {
            tmp.push_back(rng() % 9 + 1);
        }
        tmp.push_back(0);
        out_line.push_back(tmp);
    }
    for (size_t i = 0; i < out_line.size(); i++)
    {

        for (int item : out_line[i]) {
            cout << item;
        }
        cout << endl;
    }
    cout << "Перевернутый массив\n";
    reverse(out_line.begin(), out_line.end());
    for (size_t i = 0; i < out_line.size(); i++)
    {
        reverse(out_line[i].begin(), out_line[i].end());
        is_first_zero = true;
        for (int item : out_line[i]) {
            if (item != 0) {
                is_first_zero = false;
                cout << item;
                continue;
            }
            if (!is_first_zero)
                cout << item;
        }
        cout << endl;
    }
}








3
#include <iostream>
#include <math.h>
#include <vector>
#include <random>

using namespace std;

static minstd_rand0 rng;

const int A = 1;
const int B = 100;

int f() { return rng() % (B - A) + A; }

void Eacharray(int n, vector<int> nCount) {
    double Xi=0;
    for (int i = 0; i < n; i++) {
        nCount.push_back(f());
    }
    for (int i : nCount) cout << i << " ";
    cout << endl;
    double dPTeor = 1.0 / n;
   // cout << dPTeor << endl;
    for (int i = 0; i < n; i++) {
        Xi += pow(dPTeor - ((double)nCount[i] / n), 2) / ((double)nCount[i] / n);
    }
    cout << endl << Xi << endl;
}

int main() {
    double Xi = 0;
    vector<int> nCount50,nCount100,nCount1000;
    Eacharray(50, nCount50);
    Eacharray(100, nCount100);
    Eacharray(1000, nCount1000);
}






h
#pragma once
int powmod(int x, int y, int p);
int discreteLogarithm(int a, int b, int m);


m
#include <iostream>
#include <math.h>
#include<unordered_map>
#include "Header.h"

using namespace std;

int main()
{
    setlocale(LC_ALL,"Russian");
    int a = 2, b =24322, p = 30203;
    cout << discreteLogarithm(a, b, p);
}


c
#pragma once
#include <unordered_map>

#define MACRO(x,y,p,res) {\
if (y&1)\
{res = (res * x) % p;} \
y /= 2; \
x = (x * x) % p;\
}

int powmod(int x, int y, int p)
{
    int res = 1;

    x = x % p;

    while (y > 0)
    {

        MACRO(x, y, p, res);
    }
    return res;
}

int discreteLogarithm(int a, int b, int m) {

    int n = (int)sqrt(m) + 1;

    std::unordered_map<int, int> value;

    for (int i = n; i >= 1; --i)
        value[powmod(a, i * n, m)] = i;

    for (int j = 0; j < n; ++j)
    {
        int cur = (powmod(a, j, m) * b) % m;

        if (value[cur])
        {
            int ans = value[cur] * n - j;
            if (ans < m)
                return ans;
        }
    }
    return -1;
}






5
#include <iostream>
#include <list>

using namespace std;


bool func(list<int>& program,list<int>& computer) {
	if (program.end() == program.begin()) return true;
	list<int>::iterator progIter=program.end();
	progIter--;
	list<int>::iterator compIter = computer.end();
	compIter--;
	if (*progIter <= *compIter) {
		*compIter -= *progIter;
		program.pop_back();
		computer.sort();
		func(program, computer);
	}
	else if (*compIter-*progIter<0) return false;
	if (program.end() == program.begin()) return true;
}

int main(void)
{
	srand(time(0));
	setlocale(LC_ALL,"Russian");
	int pc,n;
	list <int> computer;
	list <int> program;
	cout << "Введите количество компьютеров и количество программ\n";
	cin >> pc >> n;
	cout << endl;
	for (int i = 0; i < pc; i++) {
		computer.push_back(rand()%10+1);
	}
	for (int i = 0; i < n; i++) {
		program.push_back(rand() % 10 + 1);
	}
	computer.sort();
	program.sort();
	for (int i : computer) {
		cout << i << endl;
	}
	cout << endl;
	for (int i : program) {
		cout << i << endl;
	}
	cout << endl << func(program, computer) << endl;
}




3/1
#include <iostream>
#include <math.h>
#include <vector>
#include <random>
#define mac for (int i : nCount) cout << i << " ";\
cout << endl;\
double dPTeor = 1.0 / n;

using namespace std;

static minstd_rand0 rng;

const int A = 1;
const int B = 100;

int f() { return rng() % (B - A) + A; }

void Eacharray(int n, vector<int> nCount) {
    double Xi = 0;
    for (int i = 0; i < n; i++) {
        nCount.push_back(f());
    }
    mac
    // cout << dPTeor << endl;
    for (int i = 0; i < n; i++) {
        Xi += pow(dPTeor - ((double)nCount[i] / n), 2) / ((double)nCount[i] / n);
    }
    cout << endl << Xi << endl;
}

int main() {
    double Xi = 0;
    vector<int> nCount50, nCount100, nCount1000;
    Eacharray(50, nCount50);
    Eacharray(100, nCount100);
    Eacharray(1000, nCount1000);
}






1/1 
#include <iostream>
#include <vector>
#include <math.h>
#define F(B)\
if (B==1) {cout << __LINE__ << endl;}\
else {cout << __TIME__ << endl;}\
B += 1;\

using namespace std;


void ShakerSort(vector<int>& values) {
    if (values.empty()) {
        return;
    }
    int left = 0;
    int right = values.size() - 1;
    while (left <= right) {
        for (int i = right; i > left; --i) {
            if (values[i - 1] > values[i]) {
                swap(values[i - 1], values[i]);
            }
        }
        ++left;
        for (int i = left; i < right; ++i) {
            if (values[i] > values[i + 1]) {
                swap(values[i], values[i + 1]);
            }
        }
        --right;
    }
}

int main()
{
    setlocale(LC_ALL,"Russian");
    vector<int> arra = { -1 ,  2 , -3 ,  4 ,  7 ,  6, 3  };
    int sum = 0, min=10,max=0,index=0,proizv=1,indmin=0,indmax=0;
    for (int i : arra) {
        if (i > 0) {
            sum += i;
        }
        if (min > abs(i)) { min = abs(i); indmin = index; }
        if (max < abs(i)) { max = abs(i); indmax = index; }
        index++;
    }

    if (min < max) {
        for (index = indmin; index <= indmax; index++)
        {
            proizv*=arra[index];
        }
    }
    else {
        for (index = indmax; index <= indmin; index++)
        {
            proizv *= arra[index];
        }
    }
    ShakerSort(arra);


    cout << "Сумма всех положительных элементов\n" << sum << endl;
    cout << "Произведение элементов, находящихся между наибольшим и наименьшим по модулю\n" << proizv << endl << "Отсортированный массив\n";
    for (auto i : arra) cout << i << endl;
    cout << "номер строки и время" << endl;
    
    int B = 1;
    F(B);
    F(B);
return 0;
}
